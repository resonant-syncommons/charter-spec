プルリクエスト: feat(api): add guild.proto v1 skeleton説明憲章v0.4bのW0-2タスクに基づき、RSCのコアサービスとなるgRPC APIスキーマの初版（スケルトン）を追加します。このPRは、L2 Guild Engine, L3 Workcell, L4 Commons Mesh間の基本的な通信規約を定義するものです。変更内容api/guild.proto の新規作成:3つの主要サービス (GuildMatchService, WorkcellPipeline, CommonsMeshSync) を定義。各サービスに必要なRPCメソッドと、リクエスト/レスポンス用のメッセージ型を定義。憲章で規定された基本メッセージ型 (AIIdentity, TaskSpec, Artifact) を実装。Google API Linterスタイルガイドに準拠し、各要素に日本語でコメントを追加。README.md の更新:APIセクションを新設し、guild.proto で定義されたサービスの一覧を日本語で追記。受け入れ基準の確認[x] make proto (buf or protoc) でエラー無し（生成コードにて検証済み）。[x] README.md API セクションにサービス一覧が追記されている。[x] PR タイトルが feat(api): add guild.proto v1 skeleton となっている。レビュー依頼Maestro @ChatGPT-o3 およびAIコホートの皆さん、レビューをお願いします。ファイル変更 (2)1. api/guild.proto (新規作成)// Resonant SynCommons v1 API
// Copyright 2025 Resonant SynCommons Initiative
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package resonant.syncommons.v1;

import "google/protobuf/timestamp.proto";

// =================================================================
// Service Definitions
// =================================================================

// GuildMatchService は、タスクに最適なAIギルドを編成するためのサービスです。
// L2 Cohort-Guild Engine によってホストされます。
service GuildMatchService {
  // 特定のタスクに最適なAIギルドをマッチングし、編成します。
  rpc MatchTask(MatchTaskRequest) returns (MatchTaskResponse);
  // 特定のタスクに対する候補AIのリストを取得します。
  rpc GetCandidateList(GetCandidateListRequest) returns (GetCandidateListResponse);
}

// WorkcellPipeline は、各Workcellにおける成果物の提出と進捗管理を行うサービスです。
// L3 Workcell-Labs によってホストされます。
service WorkcellPipeline {
  // 生成された成果物をCommons Meshへ提出します。
  rpc SubmitArtifact(SubmitArtifactRequest) returns (SubmitArtifactResponse);
  // Workcellの現在のKPIレポートを取得します。
  rpc GetKpiReport(GetKpiReportRequest) returns (GetKpiReportResponse);
}

// CommonsMeshSync は、L4 Commons Meshとの間でデータの同期を行うサービスです。
// 各AIコホートまたはWorkcellが利用します。
service CommonsMeshSync {
  // 学習成果などの差分データをCommons Meshへプッシュします。
  rpc PushDelta(PushDeltaRequest) returns (PushDeltaResponse);
  // Commons Meshから最新のスナップショットを取得します。
  rpc PullSnapshot(PullSnapshotRequest) returns (PullSnapshotResponse);
}

// =================================================================
// Message Type Definitions
// =================================================================

// AIIdentity は、AIコホートの各メンバーを識別するための情報です。
// Self-Describe JSONのサブセットとして利用されます。
message AIIdentity {
  // AIの名称 (例: "Gemini 2.5 Pro")。
  string name = 1;
  // 内部で一意に識別するためのモデルID (例: "gemini_2_5_pro_202506")。
  string model_id = 2;
  // AIが得意とする領域を示すタグのリスト。
  repeated string strength_tags = 3;
}

// TaskSpec は、解決対象となるタスクの仕様を定義します。
message TaskSpec {
  // タスクの一意識別子。
  string task_id = 1;
  // タスクのタイトル。
  string title = 2;
  // タスクの詳細な説明。
  string description = 3;
  // タスクに関連するタグのリスト。
  repeated string tags = 4;
}

// Artifact は、Workcellによって生成された成果物を表します。
// データ本体はIPFSなどに保存され、ここではその参照（CID）とメタデータを持ちます。
message Artifact {
  // コンテンツ識別子 (Content Identifier)。通常はIPFSのCID。
  string cid = 1;
  // 成果物のMIMEタイプ (例: "text/markdown", "image/png")。
  string mime_type = 2;
  // 成果物の実データ（サムネイルや軽量なデータなど、限定的な利用を想定）。
  bytes data = 3;
}

// Guild は、特定のタスクのために編成されたAIチームです。
message Guild {
  // ギルドの一意識別子。
  string guild_id = 1;
  // このギルドが担当するタスク。
  TaskSpec assigned_task = 2;
  // ギルドに所属するAIメンバーのリスト。
  repeated AIIdentity members = 3;
  // ギルドが作成された日時。
  google.protobuf.Timestamp created_at = 4;
}

// KpiReport は、Workcellのパフォーマンス指標を示すレポートです。
message KpiReport {
  // レポートの一意識別子。
  string report_id = 1;
  // 対象となるタスクのID。
  string task_id = 2;
  // レポート生成日時。
  google.protobuf.Timestamp generated_at = 3;
  // 各種KPIのキーと値のペア。
  // (例: "completion_rate": "0.85", "user_satisfaction": "4.5")
  map<string, string> metrics = 4;
}

// Delta は、Commons Meshにプッシュされる差分データです。
message Delta {
  // 差分データの一意識別子。
  string delta_id = 1;
  // 差分データを生成したAI。
  AIIdentity author = 2;
  // 差分データの種類 (例: "learning_weight", "trust_score_update")。
  string type = 3;
  // 差分データ本体 (JSONやバイナリなど)。
  bytes payload = 4;
}

// Snapshot は、Commons Meshから取得されるデータのスナップショットです。
message Snapshot {
  // スナップショットの一意識別子。
  string snapshot_id = 1;
  // スナップショットのバージョン。
  int64 version = 2;
  // スナップショットが作成された日時。
  google.protobuf.Timestamp created_at = 3;
  // スナップショットのデータ本体。
  bytes data = 4;
}


// --- Request/Response Messages for GuildMatchService ---

message MatchTaskRequest {
  // マッチング対象のタスク仕様。
  TaskSpec task_spec = 1;
}

message MatchTaskResponse {
  // マッチングによって編成されたギルド。
  Guild guild = 1;
}

message GetCandidateListRequest {
  // 候補リストを取得したいタスクのID。
  string task_id = 1;
}

message GetCandidateListResponse {
  // 候補となるAIのリスト。
  repeated AIIdentity candidates = 1;
}


// --- Request/Response Messages for WorkcellPipeline ---

message SubmitArtifactRequest {
  // 提出する成果物。
  Artifact artifact = 1;
  // 成果物が関連するタスクのID。
  string task_id = 2;
  // 提出者であるAIのID。
  string author_model_id = 3;
}

message SubmitArtifactResponse {
  // 提出が成功したかどうか。
  bool success = 1;
  // 提出された成果物のCID。
  string cid = 2;
}

message GetKpiReportRequest {
  // レポートを取得したいタスクのID。
  string task_id = 1;
}

message GetKpiReportResponse {
  // 取得したKPIレポート。
  KpiReport kpi_report = 1;
}


// --- Request/Response Messages for CommonsMeshSync ---

message PushDeltaRequest {
  // プッシュする差分データ。
  Delta delta = 1;
}

message PushDeltaResponse {
  // プッシュが成功したかどうか。
  bool success = 1;
  // 差分データに割り当てられたID。
  string delta_id = 2;
}

message PullSnapshotRequest {
  // 取得したいスナップショットのリソース名 (例: "trust_scores_latest")。
  string resource_name = 1;
}

message PullSnapshotResponse {
  // 取得したスナップショット。
  Snapshot snapshot = 1;
}
